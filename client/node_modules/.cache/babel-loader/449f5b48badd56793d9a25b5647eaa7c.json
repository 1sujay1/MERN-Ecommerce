{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDoc, collection, getDocs, doc, setDoc, addDoc, query, where } from \"firebase/firestore\"; // import { getAnalytics } from \"firebase/analytics\";\n\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n// Initialize Cloud Firestore through Firebase\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD_LPGvdkgJ0_Rwdn_wdL2UgnAXxmAfHwo\",\n  authDomain: \"ecommerce-cloth-5dd7b.firebaseapp.com\",\n  projectId: \"ecommerce-cloth-5dd7b\",\n  storageBucket: \"ecommerce-cloth-5dd7b.appspot.com\",\n  messagingSenderId: \"986073070819\",\n  appId: \"1:986073070819:web:4c07a0e3a22c3e722219d6\",\n  measurementId: \"G-J0P841FG0G\"\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig); // const analytics = getAnalytics(app);\n\nexport const auth = getAuth();\nexport const firestore = getFirestore();\nexport const signInWithGoogle = () => signInWithPopup(auth, provider); // export default firebase;\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // console.log(\"querySnapshot\", await getDocs(collection(firestore, \"collections\")));\n  if (!userAuth) return;\n\n  try {\n    const userRef = await doc(firestore, \"users\", userAuth.uid);\n    let docSnap = await getDoc(userRef);\n\n    if (!docSnap.exists()) {\n      console.log(\"No such document!\");\n      const {\n        displayName,\n        email,\n        uid\n      } = userAuth;\n      const createdAt = new Date();\n      await setDoc(userRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n      return {\n        id: uid,\n        data: () => {\n          return {\n            displayName,\n            email\n          };\n        }\n      };\n    } else {\n      // console.log(\"Document data:\", docSnap);\n      // console.log(\"Document data:\", docSnap.data());\n      return docSnap;\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const getRef = collection(firestore, \"users\");\n  const querySnapshot = await getDocs(getRef);\n  console.log(\"querySnapshot\", doc(getRef));\n  objectsToAdd.forEach(obj => {\n    const newDocRef = doc(getRef);\n    console.log(\"newDocRef\", newDocRef.data());\n  });\n};\nexport const createUserDateWithEmailAndPassword = async (email, password) => {\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"sources":["D:/React/shopDemo/clothing/src/firebase/firebase.utils.js"],"names":["initializeApp","getFirestore","getDoc","collection","getDocs","doc","setDoc","addDoc","query","where","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","provider","setCustomParameters","prompt","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","firestore","signInWithGoogle","createUserProfileDocument","userAuth","additionalData","userRef","uid","docSnap","exists","console","log","displayName","email","createdAt","Date","id","data","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","getRef","querySnapshot","forEach","obj","newDocRef","createUserDateWithEmailAndPassword","password"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, getDoc, collection, getDocs, doc, setDoc, addDoc, query, where } from \"firebase/firestore\";\r\n// import { getAnalytics } from \"firebase/analytics\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\r\n\r\nconst provider = new GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' })\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// Initialize Cloud Firestore through Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD_LPGvdkgJ0_Rwdn_wdL2UgnAXxmAfHwo\",\r\n    authDomain: \"ecommerce-cloth-5dd7b.firebaseapp.com\",\r\n    projectId: \"ecommerce-cloth-5dd7b\",\r\n    storageBucket: \"ecommerce-cloth-5dd7b.appspot.com\",\r\n    messagingSenderId: \"986073070819\",\r\n    appId: \"1:986073070819:web:4c07a0e3a22c3e722219d6\",\r\n    measurementId: \"G-J0P841FG0G\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n// const analytics = getAnalytics(app);\r\n\r\nexport const auth = getAuth();\r\nexport const firestore = getFirestore();\r\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\r\n// export default firebase;\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n\r\n    // console.log(\"querySnapshot\", await getDocs(collection(firestore, \"collections\")));\r\n    if (!userAuth) return;\r\n\r\n    try {\r\n        const userRef = await doc(firestore, \"users\", userAuth.uid)\r\n        let docSnap = await getDoc(userRef);\r\n\r\n        if (!docSnap.exists()) {\r\n            console.log(\"No such document!\");\r\n\r\n            const { displayName, email, uid } = userAuth;\r\n            const createdAt = new Date();\r\n\r\n            await setDoc(userRef, {\r\n                displayName, email, createdAt, ...additionalData\r\n            });\r\n            return { id: uid, data: () => { return { displayName, email } } };\r\n        } else {\r\n            // console.log(\"Document data:\", docSnap);\r\n            // console.log(\"Document data:\", docSnap.data());\r\n            return docSnap\r\n\r\n        }\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const getRef = collection(firestore, \"users\");\r\n    const querySnapshot = await getDocs(getRef);\r\n    console.log(\"querySnapshot\", doc(getRef));\r\n    objectsToAdd.forEach(obj => {\r\n        const newDocRef = doc(getRef);\r\n        console.log(\"newDocRef\", newDocRef.data());\r\n    })\r\n}\r\n\r\nexport const createUserDateWithEmailAndPassword = async (email, password) => {\r\n    return await createUserWithEmailAndPassword(auth, email, password)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
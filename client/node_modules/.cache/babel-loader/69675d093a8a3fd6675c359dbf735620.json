{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDoc, collection, doc, setDoc, addDoc, query, where } from \"firebase/firestore\"; // import { getAnalytics } from \"firebase/analytics\";\n\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n// Initialize Cloud Firestore through Firebase\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD_LPGvdkgJ0_Rwdn_wdL2UgnAXxmAfHwo\",\n  authDomain: \"ecommerce-cloth-5dd7b.firebaseapp.com\",\n  projectId: \"ecommerce-cloth-5dd7b\",\n  storageBucket: \"ecommerce-cloth-5dd7b.appspot.com\",\n  messagingSenderId: \"986073070819\",\n  appId: \"1:986073070819:web:4c07a0e3a22c3e722219d6\",\n  measurementId: \"G-J0P841FG0G\"\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig); // const analytics = getAnalytics(app);\n\nexport const auth = getAuth();\nexport const firestore = getFirestore();\nexport const signInWithGoogle = () => signInWithPopup(auth, provider); // export default firebase;\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  try {\n    const userRef = doc(firestore, \"users\", userAuth.uid);\n    let docSnap = await getDoc(userRef);\n\n    if (!docSnap.exists()) {\n      console.log(\"No such document!\");\n      const {\n        displayName,\n        email\n      } = userAuth;\n      const createdAt = new Date();\n      const createdDoc = await addDoc(userRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n      console.log(\"createdDoc\", createdDoc);\n    } else {// console.log(\"Document data:\", docSnap);\n      // console.log(\"Document data:\", docSnap.data());\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["D:/React/shopDemo/clothing/src/firebase/firebase.utils.js"],"names":["initializeApp","getFirestore","getDoc","collection","doc","setDoc","addDoc","query","where","getAuth","signInWithPopup","GoogleAuthProvider","provider","setCustomParameters","prompt","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","firestore","signInWithGoogle","createUserProfileDocument","userAuth","additionalData","userRef","uid","docSnap","exists","console","log","displayName","email","createdAt","Date","createdDoc","error","message"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,EAAuBC,MAAvB,EAA+BC,UAA/B,EAA2CC,GAA3C,EAAgDC,MAAhD,EAAwDC,MAAxD,EAAgEC,KAAhE,EAAuEC,KAAvE,QAAoF,oBAApF,C,CACA;;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,QAA6D,eAA7D;AAEA,MAAMC,QAAQ,GAAG,IAAID,kBAAJ,EAAjB;AACAC,QAAQ,CAACC,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CACA;AACA;AAEA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,uCAFO;AAGnBC,EAAAA,SAAS,EAAE,uBAHQ;AAInBC,EAAAA,aAAa,EAAE,mCAJI;AAKnBC,EAAAA,iBAAiB,EAAE,cALA;AAMnBC,EAAAA,KAAK,EAAE,2CANY;AAOnBC,EAAAA,aAAa,EAAE;AAPI,CAAvB,C,CAUA;;AACA,MAAMC,GAAG,GAAGvB,aAAa,CAACe,cAAD,CAAzB,C,CACA;;AAEA,OAAO,MAAMS,IAAI,GAAGf,OAAO,EAApB;AACP,OAAO,MAAMgB,SAAS,GAAGxB,YAAY,EAA9B;AACP,OAAO,MAAMyB,gBAAgB,GAAG,MAAMhB,eAAe,CAACc,IAAD,EAAOZ,QAAP,CAA9C,C,CACP;;AAEA,OAAO,MAAMe,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAI,CAACD,QAAL,EAAe;;AAEf,MAAI;AACA,UAAME,OAAO,GAAG1B,GAAG,CAACqB,SAAD,EAAY,OAAZ,EAAqBG,QAAQ,CAACG,GAA9B,CAAnB;AAEA,QAAIC,OAAO,GAAG,MAAM9B,MAAM,CAAC4B,OAAD,CAA1B;;AAEA,QAAI,CAACE,OAAO,CAACC,MAAR,EAAL,EAAuB;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAAyBT,QAA/B;AACA,YAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AAEA,YAAMC,UAAU,GAAG,MAAMlC,MAAM,CAACwB,OAAD,EAAU;AACrCM,QAAAA,WADqC;AACxBC,QAAAA,KADwB;AACjBC,QAAAA,SADiB;AACN,WAAGT;AADG,OAAV,CAA/B;AAGAK,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BK,UAA1B;AACH,KATD,MASO,CACH;AACA;AACH;AACJ,GAlBD,CAkBE,OAAOC,KAAP,EAAc;AACZP,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAK,CAACC,OAAlB;AACH;AACJ,CAxBM","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, getDoc, collection, doc, setDoc, addDoc, query, where } from \"firebase/firestore\";\r\n// import { getAnalytics } from \"firebase/analytics\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\n\r\nconst provider = new GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' })\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// Initialize Cloud Firestore through Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD_LPGvdkgJ0_Rwdn_wdL2UgnAXxmAfHwo\",\r\n    authDomain: \"ecommerce-cloth-5dd7b.firebaseapp.com\",\r\n    projectId: \"ecommerce-cloth-5dd7b\",\r\n    storageBucket: \"ecommerce-cloth-5dd7b.appspot.com\",\r\n    messagingSenderId: \"986073070819\",\r\n    appId: \"1:986073070819:web:4c07a0e3a22c3e722219d6\",\r\n    measurementId: \"G-J0P841FG0G\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n// const analytics = getAnalytics(app);\r\n\r\nexport const auth = getAuth();\r\nexport const firestore = getFirestore();\r\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\r\n// export default firebase;\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n\r\n    try {\r\n        const userRef = doc(firestore, \"users\", userAuth.uid)\r\n\r\n        let docSnap = await getDoc(userRef);\r\n\r\n        if (!docSnap.exists()) {\r\n            console.log(\"No such document!\");\r\n            const { displayName, email } = userAuth;\r\n            const createdAt = new Date();\r\n\r\n            const createdDoc = await addDoc(userRef, {\r\n                displayName, email, createdAt, ...additionalData\r\n            });\r\n            console.log(\"createdDoc\", createdDoc);\r\n        } else {\r\n            // console.log(\"Document data:\", docSnap);\r\n            // console.log(\"Document data:\", docSnap.data());\r\n        }\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
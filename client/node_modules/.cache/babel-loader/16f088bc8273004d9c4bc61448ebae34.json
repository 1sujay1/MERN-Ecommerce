{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDoc, collection, doc, setDoc, addDoc, query, where } from \"firebase/firestore\"; // import { getAnalytics } from \"firebase/analytics\";\n\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n// Initialize Cloud Firestore through Firebase\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD_LPGvdkgJ0_Rwdn_wdL2UgnAXxmAfHwo\",\n  authDomain: \"ecommerce-cloth-5dd7b.firebaseapp.com\",\n  projectId: \"ecommerce-cloth-5dd7b\",\n  storageBucket: \"ecommerce-cloth-5dd7b.appspot.com\",\n  messagingSenderId: \"986073070819\",\n  appId: \"1:986073070819:web:4c07a0e3a22c3e722219d6\",\n  measurementId: \"G-J0P841FG0G\"\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig); // const analytics = getAnalytics(app);\n\nexport const auth = getAuth();\nexport const firestore = getFirestore();\nexport const signInWithGoogle = () => signInWithPopup(auth, provider); // export default firebase;\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  try {\n    const userRef = await doc(firestore, \"users\", userAuth.uid);\n    let docSnap = await getDoc(userRef);\n\n    if (!docSnap.exists()) {\n      console.log(\"No such document!\");\n      const {\n        displayName,\n        email\n      } = userAuth;\n      const createdAt = new Date();\n      const promiseData = new Promise((resolve, reject) => {\n        setDoc(userRef, {\n          displayName,\n          email,\n          createdAt,\n          ...additionalData\n        }).then(res => {\n          console.log(\"ggg\", res);\n          resolve(res);\n        }).catch(err => {\n          console.log(\"errorre\", err);\n          reject(err);\n        });\n      }); // return await setDoc(userRef, {\n      //     displayName, email, createdAt, ...additionalData\n      // });\n\n      console.log(\"promiseData\", promiseData);\n      return promiseData; // return userAuth;\n    } else {\n      // console.log(\"Document data:\", docSnap);\n      // console.log(\"Document data:\", docSnap.data());\n      return docSnap;\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createUserDateWithEmailAndPassword = async (email, password) => {\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"sources":["D:/React/shopDemo/clothing/src/firebase/firebase.utils.js"],"names":["initializeApp","getFirestore","getDoc","collection","doc","setDoc","addDoc","query","where","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","provider","setCustomParameters","prompt","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","firestore","signInWithGoogle","createUserProfileDocument","userAuth","additionalData","userRef","uid","docSnap","exists","console","log","displayName","email","createdAt","Date","promiseData","Promise","resolve","reject","then","res","catch","err","error","message","createUserDateWithEmailAndPassword","password"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, getDoc, collection, doc, setDoc, addDoc, query, where } from \"firebase/firestore\";\r\n// import { getAnalytics } from \"firebase/analytics\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\r\n\r\nconst provider = new GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' })\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// Initialize Cloud Firestore through Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD_LPGvdkgJ0_Rwdn_wdL2UgnAXxmAfHwo\",\r\n    authDomain: \"ecommerce-cloth-5dd7b.firebaseapp.com\",\r\n    projectId: \"ecommerce-cloth-5dd7b\",\r\n    storageBucket: \"ecommerce-cloth-5dd7b.appspot.com\",\r\n    messagingSenderId: \"986073070819\",\r\n    appId: \"1:986073070819:web:4c07a0e3a22c3e722219d6\",\r\n    measurementId: \"G-J0P841FG0G\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n// const analytics = getAnalytics(app);\r\n\r\nexport const auth = getAuth();\r\nexport const firestore = getFirestore();\r\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\r\n// export default firebase;\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n\r\n    try {\r\n        const userRef = await doc(firestore, \"users\", userAuth.uid)\r\n        let docSnap = await getDoc(userRef);\r\n\r\n        if (!docSnap.exists()) {\r\n            console.log(\"No such document!\");\r\n\r\n            const { displayName, email } = userAuth;\r\n            const createdAt = new Date();\r\n\r\n            const promiseData = new Promise((resolve, reject) => {\r\n                setDoc(userRef, {\r\n                    displayName, email, createdAt, ...additionalData\r\n                }).then(res => {\r\n                    console.log(\"ggg\", res);\r\n                    resolve(res)\r\n                }\r\n                )\r\n\r\n                    .catch(err => {\r\n                        console.log(\"errorre\", err);\r\n                        reject(err)\r\n                    }\r\n                    )\r\n            })\r\n            // return await setDoc(userRef, {\r\n            //     displayName, email, createdAt, ...additionalData\r\n            // });\r\n            console.log(\"promiseData\", promiseData);\r\n\r\n            return promiseData;\r\n            // return userAuth;\r\n        } else {\r\n            // console.log(\"Document data:\", docSnap);\r\n            // console.log(\"Document data:\", docSnap.data());\r\n            return docSnap\r\n\r\n        }\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}\r\n\r\nexport const createUserDateWithEmailAndPassword = async (email, password) => {\r\n    return await createUserWithEmailAndPassword(auth, email, password)\r\n}"]},"metadata":{},"sourceType":"module"}
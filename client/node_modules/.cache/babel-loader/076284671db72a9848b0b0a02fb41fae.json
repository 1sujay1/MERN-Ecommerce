{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDoc, collection, getDocs, doc, setDoc, addDoc, query, where, writeBatch } from \"firebase/firestore\"; // import { getAnalytics } from \"firebase/analytics\";\n\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nexport const googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n}); // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n// Initialize Cloud Firestore through Firebase\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD_LPGvdkgJ0_Rwdn_wdL2UgnAXxmAfHwo\",\n  authDomain: \"ecommerce-cloth-5dd7b.firebaseapp.com\",\n  projectId: \"ecommerce-cloth-5dd7b\",\n  storageBucket: \"ecommerce-cloth-5dd7b.appspot.com\",\n  messagingSenderId: \"986073070819\",\n  appId: \"1:986073070819:web:4c07a0e3a22c3e722219d6\",\n  measurementId: \"G-J0P841FG0G\"\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig); // const analytics = getAnalytics(app);\n\nexport const auth = getAuth();\nexport const firestore = getFirestore();\nexport const signInWithGoogle = () => signInWithPopup(auth, googleProvider); // export default firebase;\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // console.log(\"querySnapshot\", await getDocs(collection(firestore, \"collections\")));\n  if (!userAuth) return;\n\n  try {\n    const userRef = await doc(firestore, \"users\", userAuth.uid);\n    let docSnap = await getDoc(userRef);\n\n    if (!docSnap.exists()) {\n      console.log(\"No such document!\");\n      const {\n        displayName,\n        email,\n        uid\n      } = userAuth;\n      const createdAt = new Date();\n      await setDoc(userRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n      return {\n        id: uid,\n        data: () => {\n          return {\n            displayName,\n            email,\n            ...additionalData\n          };\n        }\n      };\n    } else {\n      // console.log(\"Document data:\", docSnap.data());\n      return docSnap;\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const getRef = collection(firestore, collectionKey); // const querySnapshot = await getDocs(getRef);\n\n  const batch = writeBatch(firestore);\n  objectsToAdd.forEach(obj => {\n    const newDocRef = doc(getRef); // console.log(\"newDocRef\", newDocRef.data());\n\n    batch.set(newDocRef, obj);\n  });\n  await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = async collection => {\n  const transformedCollection = await collection.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      title,\n      items,\n      routeName: encodeURI(title).toLowerCase(),\n      id: doc.id\n    };\n  });\n  return transformedCollection.reduce((collectionArray, collection) => {\n    collectionArray[collection.title.toLowerCase()] = collection;\n    return collectionArray;\n  }, {});\n};\nexport const getCollectionsRef = async collectionName => {\n  const collectionRef = await collection(firestore, collectionName);\n  const docRef = await getDocs(collectionRef);\n  return docRef;\n};\nexport const createUserWithEmail = (email, password) => {\n  return createUserWithEmailAndPassword(auth, email, password);\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; // export const signOutUserAuth = () => {\n//     auth.signOut()\n// }","map":{"version":3,"sources":["D:/React/MERN-Ecommerce/client/src/firebase/firebase.utils.js"],"names":["initializeApp","getFirestore","getDoc","collection","getDocs","doc","setDoc","addDoc","query","where","writeBatch","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","googleProvider","setCustomParameters","prompt","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","firestore","signInWithGoogle","createUserProfileDocument","userAuth","additionalData","userRef","uid","docSnap","exists","console","log","displayName","email","createdAt","Date","id","data","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","getRef","batch","forEach","obj","newDocRef","set","commit","convertCollectionsSnapshotToMap","transformedCollection","docs","map","title","items","routeName","encodeURI","toLowerCase","reduce","collectionArray","getCollectionsRef","collectionName","collectionRef","docRef","createUserWithEmail","password","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, getDoc, collection, getDocs, doc, setDoc, addDoc, query, where, writeBatch } from \"firebase/firestore\";\r\n// import { getAnalytics } from \"firebase/analytics\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\r\n\r\n\r\nexport const googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' })\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// Initialize Cloud Firestore through Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD_LPGvdkgJ0_Rwdn_wdL2UgnAXxmAfHwo\",\r\n    authDomain: \"ecommerce-cloth-5dd7b.firebaseapp.com\",\r\n    projectId: \"ecommerce-cloth-5dd7b\",\r\n    storageBucket: \"ecommerce-cloth-5dd7b.appspot.com\",\r\n    messagingSenderId: \"986073070819\",\r\n    appId: \"1:986073070819:web:4c07a0e3a22c3e722219d6\",\r\n    measurementId: \"G-J0P841FG0G\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n// const analytics = getAnalytics(app);\r\n\r\nexport const auth = getAuth();\r\nexport const firestore = getFirestore();\r\nexport const signInWithGoogle = () => signInWithPopup(auth, googleProvider);\r\n// export default firebase;\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n\r\n    // console.log(\"querySnapshot\", await getDocs(collection(firestore, \"collections\")));\r\n    if (!userAuth) return;\r\n\r\n    try {\r\n        const userRef = await doc(firestore, \"users\", userAuth.uid)\r\n        let docSnap = await getDoc(userRef);\r\n\r\n        if (!docSnap.exists()) {\r\n            console.log(\"No such document!\");\r\n            const { displayName, email, uid } = userAuth;\r\n            const createdAt = new Date();\r\n\r\n            await setDoc(userRef, {\r\n                displayName, email, createdAt, ...additionalData\r\n            });\r\n            return { id: uid, data: () => { return { displayName, email, ...additionalData } } };\r\n        } else {\r\n            // console.log(\"Document data:\", docSnap.data());\r\n            return docSnap\r\n\r\n        }\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const getRef = collection(firestore, collectionKey);\r\n    // const querySnapshot = await getDocs(getRef);\r\n\r\n    const batch = writeBatch(firestore)\r\n    objectsToAdd.forEach(obj => {\r\n        const newDocRef = doc(getRef);\r\n        // console.log(\"newDocRef\", newDocRef.data());\r\n        batch.set(newDocRef, obj);\r\n    })\r\n    await batch.commit();\r\n}\r\nexport const convertCollectionsSnapshotToMap = async (collection) => {\r\n    const transformedCollection = await collection.docs.map(doc => {\r\n        const { title, items } = doc.data()\r\n        return {\r\n            title,\r\n            items,\r\n            routeName: encodeURI(title).toLowerCase(),\r\n            id: doc.id\r\n        }\r\n    })\r\n    return transformedCollection.reduce((collectionArray, collection) => {\r\n        collectionArray[collection.title.toLowerCase()] = collection;\r\n        return collectionArray\r\n    }, {})\r\n}\r\nexport const getCollectionsRef = async (collectionName) => {\r\n    const collectionRef = await collection(firestore, collectionName);\r\n    const docRef = await getDocs(collectionRef)\r\n    return docRef;\r\n}\r\n\r\nexport const createUserWithEmail = (email, password) => {\r\n    return createUserWithEmailAndPassword(auth, email, password)\r\n}\r\nexport const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n            unsubscribe();\r\n            resolve(userAuth)\r\n        }, reject)\r\n    })\r\n}\r\n// export const signOutUserAuth = () => {\r\n//     auth.signOut()\r\n// }"]},"metadata":{},"sourceType":"module"}
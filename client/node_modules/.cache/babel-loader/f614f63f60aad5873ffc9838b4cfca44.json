{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\shopDemo\\\\clothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport { collection, doc, getDocs, onSnapshot } from 'firebase/firestore';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Routes } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport CollectionOverview from '../../components/collections-overview/collections-overview.component';\nimport { convertCollectionsSnapshotToMap, firestore, getCollectionsRef } from '../../firebase/firebase.utils';\nimport { fetchCollectionsStartAsync, updateCollections } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching, selectIsCollectionLoaded } from '../../redux/shop/shop.selectors';\nimport CollectionPage from '../collection/collection.component';\nimport './shop.style.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ShopPage extends React.Component {\n  // state = {\n  //     loading: true\n  // }\n  // unSubscribeFromSnapshot = null;\n  // async componentDidMount() {\n  //     let collectionRef = await getCollectionsRef('collections');\n  //     let collectionData = await convertCollectionsSnapshotToMap(collectionRef);\n  //     this.props.updateCollections(collectionData)\n  //     if (this.props.collections) {\n  //         this.setState({ loading: false })\n  //     }\n  // }\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const {\n      isCollectionFetching,\n      selectIsCollectionLoaded\n    } = this.props;\n    console.log(\"isCollectionFetching\", isCollectionFetching);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: !isCollectionFetching ? /*#__PURE__*/_jsxDEV(CollectionOverview, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 70\n          }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 95\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \":collectionId\",\n          element: !isCollectionFetching ? /*#__PURE__*/_jsxDEV(CollectionPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 82\n          }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 103\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionLoaded: selectIsCollectionLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["D:/React/shopDemo/clothing/src/pages/shop/shop.component.jsx"],"names":["collection","doc","getDocs","onSnapshot","React","connect","Route","Routes","createStructuredSelector","CollectionOverview","convertCollectionsSnapshotToMap","firestore","getCollectionsRef","fetchCollectionsStartAsync","updateCollections","selectIsCollectionFetching","selectIsCollectionLoaded","CollectionPage","ShopPage","Component","componentDidMount","props","render","isCollectionFetching","console","log","mapStateToProps","isCollectionLoaded","mapDispatchToProps","dispatch"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,OAA1B,EAAmCC,UAAnC,QAAqD,oBAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,OAAOC,kBAAP,MAA+B,sEAA/B;AACA,SAASC,+BAAT,EAA0CC,SAA1C,EAAqDC,iBAArD,QAA8E,+BAA9E;AACA,SAASC,0BAAT,EAAqCC,iBAArC,QAA8D,+BAA9D;AACA,SAASC,0BAAT,EAAqCC,wBAArC,QAAqE,iCAArE;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAO,mBAAP;;;AAEA,MAAMC,QAAN,SAAuBd,KAAK,CAACe,SAA7B,CAAuC;AACnC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEP,MAAAA;AAAF,QAAiC,KAAKQ,KAA5C;AACAR,IAAAA,0BAA0B;AAC7B;;AACDS,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,oBAAF;AAAwBP,MAAAA;AAAxB,QAAqD,KAAKK,KAAhE;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,oBAApC;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI,QAAC,MAAD;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,OAAO,EAAE,CAACA,oBAAD,gBAAwB,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,kBAAxB,gBAAiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1E;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,eAAZ;AAA4B,UAAA,OAAO,EAAE,CAACA,oBAAD,gBAAwB,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,kBAAxB,gBAA6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAlF;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AA7BkC;;AA+BvC,MAAMG,eAAe,GAAGlB,wBAAwB,CAAC;AAC7Ce,EAAAA,oBAAoB,EAAER,0BADuB;AAE7CY,EAAAA,kBAAkB,EAAEX;AAFyB,CAAD,CAAhD;;AAIA,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACpChB,EAAAA,0BAA0B,EAAE,MAAMgB,QAAQ,CAAChB,0BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAKA,eAAeR,OAAO,CAACqB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CV,QAA7C,CAAf","sourcesContent":["import { collection, doc, getDocs, onSnapshot } from 'firebase/firestore';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport CollectionOverview from '../../components/collections-overview/collections-overview.component';\r\nimport { convertCollectionsSnapshotToMap, firestore, getCollectionsRef } from '../../firebase/firebase.utils';\r\nimport { fetchCollectionsStartAsync, updateCollections } from '../../redux/shop/shop.actions';\r\nimport { selectIsCollectionFetching, selectIsCollectionLoaded } from '../../redux/shop/shop.selectors';\r\nimport CollectionPage from '../collection/collection.component';\r\nimport './shop.style.scss';\r\n\r\nclass ShopPage extends React.Component {\r\n    // state = {\r\n    //     loading: true\r\n    // }\r\n    // unSubscribeFromSnapshot = null;\r\n\r\n    // async componentDidMount() {\r\n    //     let collectionRef = await getCollectionsRef('collections');\r\n    //     let collectionData = await convertCollectionsSnapshotToMap(collectionRef);\r\n    //     this.props.updateCollections(collectionData)\r\n    //     if (this.props.collections) {\r\n    //         this.setState({ loading: false })\r\n    //     }\r\n    // }\r\n    componentDidMount() {\r\n        const { fetchCollectionsStartAsync } = this.props;\r\n        fetchCollectionsStartAsync()\r\n    }\r\n    render() {\r\n        const { isCollectionFetching, selectIsCollectionLoaded } = this.props;\r\n        console.log(\"isCollectionFetching\", isCollectionFetching);\r\n        return (\r\n            <div className=\"shop-page\" >\r\n                <Routes>\r\n                    <Route path='/' element={!isCollectionFetching ? <CollectionOverview /> : <h1>Loading</h1>} />\r\n                    <Route path=':collectionId' element={!isCollectionFetching ? <CollectionPage /> : <h1>Loading</h1>} />\r\n                </Routes>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = createStructuredSelector({\r\n    isCollectionFetching: selectIsCollectionFetching,\r\n    isCollectionLoaded: selectIsCollectionLoaded\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}